pipeline:
  name: new-pipeline
  identifier: newpipeline
  projectIdentifier: Manisha
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: testttt
        identifier: testttt
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: rolloutsvc
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  variables:
                    - name: rolloutsvcvar
                      type: String
                      value: <+input>
          environment:
            environmentRef: harnessdevenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: harnessk8sinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: "false"
    - stage:
        name: test-build
        identifier: testbuild
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: harnessk8sconnector
              namespace: harness-delegate-ng
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: library/python
                    shell: Sh
                    command: |-
                      cat /etc/os-release
                      apt install curl
                      echo "deb http://deb.debian.org/debian bookworm main" | tee -a /etc/apt/sources.list
                      echo "deb http://security.debian.org/debian-security bookworm-security main" | tee -a /etc/apt/sources.list
                      echo "deb http://deb.debian.org/debian bookworm-updates main" | tee -a /etc/apt/sources.list
                      apt update
                      apt-get install -y jq
                      jq --version
        when:
          pipelineStatus: Success
          condition: "false"
    - stage:
        name: test-build-new
        identifier: testbuildnew
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: testbuild
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: library/python
                    shell: Sh
                    command: |-
                      wget -O /usr/local/bin/jq "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
                      chmod +x /usr/local/bin/jq
                      jq --version

                      curl --version
        when:
          pipelineStatus: Success
          condition: "false"
    - stage:
        name: custom stage
        identifier: custom_stage
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          curl --version
                          dnf install -y jq
                          jq --version
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
